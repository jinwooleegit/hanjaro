/**
 * 한자 필순 데이터 생성 스크립트
 * 
 * 기본 한자의 필순 데이터를 자동으로 생성하여 개별 JSON 파일로 저장하는 스크립트입니다.
 * HanziWriterComponent.tsx에 내장된 기본 한자 데이터를 활용합니다.
 */

const fs = require('fs');
const path = require('path');

// 기본 한자 SVG 데이터 (HanziWriterComponent.tsx에서 추출)
const BASIC_HANJA_DATA = {
  '一': { character: '一', strokes: ['M 5 50 L 95 50'], medians: [[[5, 50], [95, 50]]] },
  '二': { 
    character: '二', 
    strokes: ['M 5 33 L 95 33', 'M 5 66 L 95 66'], 
    medians: [[[5, 33], [95, 33]], [[5, 66], [95, 66]]] 
  },
  '三': { 
    character: '三', 
    strokes: ['M 5 25 L 95 25', 'M 5 50 L 95 50', 'M 5 75 L 95 75'], 
    medians: [[[5, 25], [95, 25]], [[5, 50], [95, 50]], [[5, 75], [95, 75]]] 
  },
  '人': {
    character: '人',
    strokes: ['M 40 15 L 5 75', 'M 40 15 L 95 75'],
    medians: [[[40, 15], [5, 75]], [[40, 15], [95, 75]]]
  },
  '大': {
    character: '大',
    strokes: ['M 50 15 L 10 80', 'M 50 15 L 90 80', 'M 15 40 L 85 40'],
    medians: [[[50, 15], [10, 80]], [[50, 15], [90, 80]], [[15, 40], [85, 40]]]
  },
  '土': {
    character: '土',
    strokes: [
      'M 20 40 L 80 40',
      'M 50 20 L 50 80',
      'M 20 80 L 80 80'
    ],
    medians: [
      [[20, 40], [80, 40]],
      [[50, 20], [50, 80]],
      [[20, 80], [80, 80]]
    ]
  },
  '木': {
    character: '木',
    strokes: ['M 50 10 L 50 90', 'M 15 40 L 85 40', 'M 20 10 L 50 40', 'M 80 10 L 50 40'],
    medians: [[[50, 10], [50, 90]], [[15, 40], [85, 40]], [[20, 10], [50, 40]], [[80, 10], [50, 40]]]
  },
  '水': {
    character: '水',
    strokes: ['M 35 10 L 35 80', 'M 35 10 L 10 30', 'M 35 10 L 65 30', 'M 10 50 L 35 70', 'M 60 50 L 35 70'],
    medians: [[[35, 10], [35, 80]], [[35, 10], [10, 30]], [[35, 10], [65, 30]], [[10, 50], [35, 70]], [[60, 50], [35, 70]]]
  },
  '心': {
    character: '心',
    strokes: [
      'M 50 20 L 50 50',
      'M 20 50 C 30 30 70 30 80 50',
      'M 20 50 L 35 90',
      'M 80 50 L 65 90'
    ],
    medians: [
      [[50, 20], [50, 50]],
      [[20, 50], [50, 40], [80, 50]],
      [[20, 50], [35, 90]],
      [[80, 50], [65, 90]]
    ]
  },
  '月': {
    character: '月',
    strokes: [
      'M 25 15 L 75 15', 
      'M 25 15 L 25 85', 
      'M 25 85 L 75 85', 
      'M 75 15 L 75 85',
      'M 40 40 L 60 40',
      'M 40 65 L 60 65'
    ],
    medians: [
      [[25, 15], [75, 15]],
      [[25, 15], [25, 85]],
      [[25, 85], [75, 85]],
      [[75, 15], [75, 85]],
      [[40, 40], [60, 40]],
      [[40, 65], [60, 65]]
    ]
  },
  '日': {
    character: '日',
    strokes: [
      'M 25 15 L 75 15', 
      'M 25 15 L 25 85', 
      'M 25 85 L 75 85', 
      'M 75 15 L 75 85',
      'M 25 50 L 75 50'
    ],
    medians: [
      [[25, 15], [75, 15]],
      [[25, 15], [25, 85]],
      [[25, 85], [75, 85]],
      [[75, 15], [75, 85]],
      [[25, 50], [75, 50]]
    ]
  },
  '山': {
    character: '山',
    strokes: [
      'M 15 75 L 35 25', 
      'M 35 25 L 50 50', 
      'M 50 50 L 65 25', 
      'M 65 25 L 85 75'
    ],
    medians: [
      [[15, 75], [35, 25]],
      [[35, 25], [50, 50]],
      [[50, 50], [65, 25]],
      [[65, 25], [85, 75]]
    ]
  },
  '口': {
    character: '口',
    strokes: [
      'M 25 25 L 75 25', 
      'M 25 25 L 25 75', 
      'M 25 75 L 75 75', 
      'M 75 25 L 75 75'
    ],
    medians: [
      [[25, 25], [75, 25]],
      [[25, 25], [25, 75]],
      [[25, 75], [75, 75]],
      [[75, 25], [75, 75]]
    ]
  },
  '過': {
    character: '過',
    strokes: [
      // 좌측 부수 (쇠변)
      'M 20 10 L 20 90',
      'M 20 10 L 40 10',
      'M 20 50 L 40 50',
      'M 20 90 L 40 90',
      // 우측 상단
      'M 45 15 L 70 15',
      'M 57 15 L 57 25',
      'M 50 25 L 65 25',
      // 우측 중앙
      'M 45 35 L 85 35',
      'M 45 45 L 85 45',
      // 우측 하단
      'M 55 55 L 55 80',
      'M 45 65 L 65 65',
      'M 75 55 L 75 80',
      'M 45 80 L 85 80'
    ],
    medians: [
      [[20, 10], [20, 90]],
      [[20, 10], [40, 10]],
      [[20, 50], [40, 50]],
      [[20, 90], [40, 90]],
      [[45, 15], [70, 15]],
      [[57, 15], [57, 25]],
      [[50, 25], [65, 25]],
      [[45, 35], [85, 35]],
      [[45, 45], [85, 45]],
      [[55, 55], [55, 80]],
      [[45, 65], [65, 65]],
      [[75, 55], [75, 80]],
      [[45, 80], [85, 80]]
    ]
  },
  '程': {
    character: '程',
    strokes: [
      // 좌측 부수 (곡식 화)
      'M 10 10 L 40 10',
      'M 25 10 L 25 30',
      'M 15 20 L 35 20',
      'M 10 30 L 40 30',
      'M 5 40 L 45 40',
      // 우측 상단
      'M 60 10 L 60 25',
      'M 50 15 L 70 15',
      // 우측 중앙
      'M 50 30 L 80 30',
      'M 50 40 L 80 40',
      // 우측 하단
      'M 60 50 L 60 80',
      'M 50 60 L 70 60',
      'M 70 50 L 70 80',
      'M 50 80 L 80 80'
    ],
    medians: [
      [[10, 10], [40, 10]],
      [[25, 10], [25, 30]],
      [[15, 20], [35, 20]],
      [[10, 30], [40, 30]],
      [[5, 40], [45, 40]],
      [[60, 10], [60, 25]],
      [[50, 15], [70, 15]],
      [[50, 30], [80, 30]],
      [[50, 40], [80, 40]],
      [[60, 50], [60, 80]],
      [[50, 60], [70, 60]],
      [[70, 50], [70, 80]],
      [[50, 80], [80, 80]]
    ]
  },
  '學': {
    character: '學',
    strokes: [
      // 상단 부분 (아래 뚫린 사각형)
      'M 25 10 L 75 10',
      'M 25 10 L 25 30',
      'M 75 10 L 75 30',
      // 상단 중앙 가로선
      'M 30 20 L 70 20',
      // 중앙 어깨 부분
      'M 20 30 L 80 30',
      // 중앙 세로선
      'M 50 30 L 50 55',
      // 좌측 子 부분
      'M 30 40 L 45 40',
      'M 30 50 L 45 50',
      'M 35 40 L 35 65',
      // 우측 子 부분
      'M 55 40 L 70 40',
      'M 55 50 L 70 50',
      'M 65 40 L 65 65',
      // 하단 부분
      'M 25 65 L 75 65',
      'M 25 65 L 25 85',
      'M 75 65 L 75 85',
      'M 25 85 L 75 85'
    ],
    medians: [
      [[25, 10], [75, 10]],
      [[25, 10], [25, 30]],
      [[75, 10], [75, 30]],
      [[30, 20], [70, 20]],
      [[20, 30], [80, 30]],
      [[50, 30], [50, 55]],
      [[30, 40], [45, 40]],
      [[30, 50], [45, 50]],
      [[35, 40], [35, 65]],
      [[55, 40], [70, 40]],
      [[55, 50], [70, 50]],
      [[65, 40], [65, 65]],
      [[25, 65], [75, 65]],
      [[25, 65], [25, 85]],
      [[75, 65], [75, 85]],
      [[25, 85], [75, 85]]
    ]
  }
};

// 자주 사용되는 추가 한자 목록 (향후 확장 가능)
const ADDITIONAL_HANJA = {
  '子': {
    character: '子',
    strokes: [
      'M 30 30 L 70 30',
      'M 50 30 L 50 70',
      'M 30 70 L 50 50',
      'M 50 50 L 70 70'
    ],
    medians: [
      [[30, 30], [70, 30]],
      [[50, 30], [50, 70]],
      [[30, 70], [50, 50]],
      [[50, 50], [70, 70]]
    ]
  },
  '門': {
    character: '門',
    strokes: [
      'M 25 15 L 75 15',
      'M 25 15 L 25 85',
      'M 75 15 L 75 85',
      'M 25 85 L 75 85',
      'M 50 15 L 50 85',
      'M 35 50 L 45 50',
      'M 55 50 L 65 50'
    ],
    medians: [
      [[25, 15], [75, 15]],
      [[25, 15], [25, 85]],
      [[75, 15], [75, 85]],
      [[25, 85], [75, 85]],
      [[50, 15], [50, 85]],
      [[35, 50], [45, 50]],
      [[55, 50], [65, 50]]
    ]
  },
  '金': {
    character: '金',
    strokes: [
      'M 30 15 L 70 15',
      'M 50 15 L 50 85',
      'M 30 40 L 70 40',
      'M 20 60 L 50 40',
      'M 80 60 L 50 40',
      'M 20 60 L 20 85',
      'M 80 60 L 80 85',
      'M 20 85 L 80 85'
    ],
    medians: [
      [[30, 15], [70, 15]],
      [[50, 15], [50, 85]],
      [[30, 40], [70, 40]],
      [[20, 60], [50, 40]],
      [[80, 60], [50, 40]],
      [[20, 60], [20, 85]],
      [[80, 60], [80, 85]],
      [[20, 85], [80, 85]]
    ]
  }
};

// 모든 한자 데이터 병합
const ALL_HANJA_DATA = { ...BASIC_HANJA_DATA, ...ADDITIONAL_HANJA };

// 데이터 저장 디렉토리
const DATA_DIR = path.join(process.cwd(), 'data', 'stroke_data');

// 디렉토리가 없으면 생성
if (!fs.existsSync(DATA_DIR)) {
  fs.mkdirSync(DATA_DIR, { recursive: true });
  console.log(`디렉토리 생성: ${DATA_DIR}`);
}

// 각 한자에 대해 개별 파일로 저장
Object.entries(ALL_HANJA_DATA).forEach(([char, data]) => {
  const filePath = path.join(DATA_DIR, `${char}.json`);
  
  // 파일 존재 확인
  if (fs.existsSync(filePath)) {
    console.log(`파일이 이미 존재합니다: ${filePath}`);
    return;
  }
  
  try {
    // HanziWriter 형식으로 데이터 변환
    const fileData = {
      character: char,
      strokes: data.strokes,
      medians: data.medians
    };
    
    // 파일로 저장
    fs.writeFileSync(filePath, JSON.stringify(fileData, null, 2), 'utf8');
    console.log(`파일 생성: ${filePath}`);
  } catch (error) {
    console.error(`한자 데이터 저장 오류 (${char}):`, error);
  }
});

// 통합 인덱스 파일 생성
try {
  const indexData = {};
  
  Object.entries(ALL_HANJA_DATA).forEach(([char, data]) => {
    indexData[char] = {
      character: char,
      strokes: data.strokes,
      medians: data.medians
    };
  });
  
  const indexFilePath = path.join(process.cwd(), 'data', 'hanja_stroke_index.json');
  fs.writeFileSync(indexFilePath, JSON.stringify(indexData, null, 2), 'utf8');
  console.log(`통합 인덱스 파일 생성: ${indexFilePath}`);
} catch (error) {
  console.error('통합 인덱스 파일 생성 오류:', error);
}

console.log('한자 필순 데이터 생성 완료!'); 